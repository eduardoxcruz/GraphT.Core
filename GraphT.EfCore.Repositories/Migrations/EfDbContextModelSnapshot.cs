// <auto-generated />
using System;
using System.Collections.Generic;
using GraphT.EfCore.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphT.EfCore.Repositories.Migrations
{
    [DbContext(typeof(EfDbContext))]
    partial class EfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphT.Model.Aggregates.TaskAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int>("Complexity")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsFun")
                        .HasColumnType("bit")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsProductive")
                        .HasColumnType("bit")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("Relevance")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.ComplexProperty<Dictionary<string, object>>("DateTimeInfo", "GraphT.Model.Aggregates.TaskAggregate.DateTimeInfo#DateTimeInfo", b1 =>
                        {
                            b1.Property<DateTimeOffset>("CreationDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("FinishDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("LimitDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("StartDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("TimeSpend")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("TaskAggregates");
                });

            modelBuilder.Entity("GraphT.Model.ValueObjects.TaskLog", b =>
                {
                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(1);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<TimeSpan?>("TimeSpentOnTask")
                        .HasColumnType("time")
                        .HasColumnOrder(3);

                    b.ToTable("TaskLogs");
                });

            modelBuilder.Entity("TaskStreams", b =>
                {
                    b.Property<Guid>("UpstreamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DownstreamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UpstreamId", "DownstreamId");

                    b.HasIndex("DownstreamId");

                    b.ToTable("TaskStreams");
                });

            modelBuilder.Entity("TaskStreams", b =>
                {
                    b.HasOne("GraphT.Model.Aggregates.TaskAggregate", null)
                        .WithMany()
                        .HasForeignKey("DownstreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphT.Model.Aggregates.TaskAggregate", null)
                        .WithMany()
                        .HasForeignKey("UpstreamId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
